#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Copenhagen}
\usecolortheme{seahorse}

\setbeamercovered{transparent}
% oder auch nicht
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 2
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language danish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Diese Datei enthält eine Lösungsvorlage für:
\end_layout

\begin_layout Itemize
Vorträge bei einer (deutschsprachigen) Konferenz/einem Kolloquium.
 
\end_layout

\begin_layout Itemize
Vortragslänge von etwa 20 Minuten.
 
\end_layout

\begin_layout Itemize
Aussehen des Vortrags ist verschnörkelt/dekorativ.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Klein, schön, schnell
\begin_inset Argument
status open

\begin_layout Plain Layout
Klein, schön, schnell
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, nur bei langen Titeln nötig
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subtitle
mit Curses den eigenen Scripten eine schöne Oberfläche verleihen
\end_layout

\begin_layout Author
Alexander Kluth
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Namen müssen in derselben Reihenfolge wie im Papier erscheinen.
 
\end_layout

\begin_layout Itemize
Die Institutsfußnotenmarke (
\family sans
Einfügen\SpecialChar \menuseparator
Benutzerdefinierte Einfügungen\SpecialChar \menuseparator
Institutsfußnotenmarke
\family default
) sollte nur verwendet werden, wenn die Autoren unterschiedlichen Instituten
 angehören.
\end_layout

\end_inset


\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Itemize
optional, nur bei vielen Autoren
\end_layout

\begin_layout Itemize
wenn es sehr viele Autoren gibt, besser 
\begin_inset Quotes ald
\end_inset

Autor et al.
\begin_inset Quotes ard
\end_inset

 verwenden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Die Institutsfußnotenmarke (
\family sans
Einfügen\SpecialChar \menuseparator
Benutzerdefinierte Einfügungen\SpecialChar \menuseparator
Institutsfußnotenmarke
\family default
) sollte nur verwendet werden, wenn die Autoren unterschiedlichen Instituten
 angehören.
 
\end_layout

\begin_layout Itemize
Haltn Sie es einfach, niemand interessiert sich für Ihre genau Adresse.
 
\end_layout

\end_inset


\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, aber oft nötig
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Date
15.
 deutscher Perl-Workshop 2013
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Voller oder abgekürzter Name sind möglich.
 
\end_layout

\begin_layout Itemize
Dieser Eintrag ist nicht für das Publikum gedacht (das weiß ja, bei welcher
 Konferenz es ist), sondern für Leute, die die Folien später lesen.
\end_layout

\end_inset


\begin_inset Argument
status open

\begin_layout Plain Layout
gpw2013
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, möglichst Abkürzung des Konferenznamens verwenden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Falls eine Logodatei namens 
\begin_inset Quotes ald
\end_inset

institution-logo-filename.xxx
\begin_inset Quotes ard
\end_inset

 vorhanden ist (wobei xxx ein von LaTeX bzw.
 PDFLaTeX lesbares Grafikformat ist), können Sie ein Logo einfügen, indem
 Sie das Folgende auskommentieren (
\begin_inset Quotes ald
\end_inset

%
\begin_inset Quotes ard
\end_inset

 am Anfang entfernen):
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Folgendes sollten Sie löschen, wenn nicht am Anfang jedes Unterabschnitts
 die Gliederung gezeigt werdem soll.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Gliederung}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Falls Sie Aufzählungen immer schrittweise zeigen wollen, können Sie folgenden
 Befehl auskommentieren:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Gliederung
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Einen Vortrag zu strukturieren, ist nicht immer einfach.
 Die nachfolgende Struktur kann unangemessen sein.
 Hier ein paar Regeln, die für diese Lösungsvorlage gelten:
\end_layout

\begin_layout Itemize
Verwenden Sie zwei oder drei Abschnitte (neben der Zusammenfassung).
 
\end_layout

\begin_layout Itemize

\series bold
Maximal
\series default
 drei Unterabschnitte pro Abschnitt.
 
\end_layout

\begin_layout Itemize
Pro Rahmen sollten Sie zwischen 30 Sekunden und zwei Minuten reden.
 Die Präsentation sollte also 15 bis 30 Rahmen haben.
\end_layout

\begin_layout Itemize
Konferenzteilnehmer wissen oft wenig von der Materie des Vortrags.
 Also: Vereinfachen Sie! 
\end_layout

\begin_layout Itemize
In 20 Minuten ist es schon schwer genug, die Hauptbotschaft zu vermitteln.
 Deshalb sollten Sie Details auslassen, selbst wenn die Darstellung dann
 weniger genau ist, als Sie das gerne möchten.
 
\end_layout

\begin_layout Itemize
Falls Sie Details weglassen, die eigentlich wichtig für einen Beweis/Umsetzung
 sind, sagen Sie dies den Leuten einmal klar und deutlich.
 Alle werden damit leben können.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Einführung
\end_layout

\begin_layout Subsection
Wieso eigentlich? Motivation!
\end_layout

\begin_layout BeginFrame
Wieso eigentlich? Motivation!
\end_layout

\begin_layout FrameSubtitle
\begin_inset Note Note
status open

\begin_layout Plain Layout
Eine Überschrift fasst einen Rahmen verständlich zusammen.
 Man muss sie verstehen können, selbst wenn man nicht den Rest des Rahmens
 versteht.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Zusammengehackten Tools einfacher benutzbar machen
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Benutzung für eventuell andere Nutzer intiutiver machen
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Optische Aufwertung
\end_layout

\begin_layout BeginFrame
Wieso eigentlich? Motivation!
\end_layout

\begin_layout Itemize
Curses::UI ist einfach
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Gute Dokumentation
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Geringer Overhead
\end_layout

\begin_layout Subsection
Warum Curses?
\end_layout

\begin_layout BeginFrame
Warum Curses, warum nicht Tk? Warum keine GUI?
\end_layout

\begin_layout Block
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Block
Kurze Antwort:
\end_layout

\begin_layout Block
Weil wir nix Klicki-Bunti, wir sind Perl-Hacker die mit der Konsole arbeiten
\end_layout

\begin_layout BeginFrame
Warum Curses, warum nicht Tk? Warum keine GUI?
\end_layout

\begin_layout Standard
Lange Antwort:
\end_layout

\begin_layout Itemize
Ziel ist nicht höchste Benutzerfreundlichkeit
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Eigentlichen Sinn des Programms nicht verschleiern
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Möglichkeit der Ausführung auf Rechnern ohne X-Server
\end_layout

\begin_layout Section
Einführung in Curses
\end_layout

\begin_layout Subsection
Kurze Geschichte zum Aufbau
\end_layout

\begin_layout BeginFrame
Curses::UI und der große Bruder
\end_layout

\begin_layout Itemize
Curses::UI basiert auf dem Paket Curses
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Curses ist das Interface zur curses(3) Library des Systems
\end_layout

\begin_layout BeginFrame
Curses::UI hat viel zu bieten
\end_layout

\begin_layout Itemize
Objektorientiertes Interface
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Abstraktionsschicht zu Curses
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Viele Out-of-the-Box Widgets
\end_layout

\begin_layout Subsection
Was Curses::UI ausmacht: Die Widgets, Teil 1
\end_layout

\begin_layout BeginFrame
Am Anfang war das Fenster - Curses::UI::Window
\end_layout

\begin_layout Itemize
Das Window-Widget selbst ist ein Widget
\end_layout

\begin_layout Itemize
Weitere Widgets können dem Window-Widget hinzugefügt werden
\end_layout

\begin_layout Itemize
Stellt den Applikations
\begin_inset Quotes ard
\end_inset

rahmen
\begin_inset Quotes ard
\end_inset

 dar
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
use Curses::UI;
\end_layout

\begin_layout Plain Layout

\family typewriter
my $cui = new Curses::UI;
\end_layout

\begin_layout Plain Layout

\family typewriter
my $win = $cui->add(
\end_layout

\begin_layout Plain Layout

\family typewriter
	
\color red
'mainWindow'
\color inherit
,	 
\end_layout

\begin_layout Plain Layout

\family typewriter
	
\color blue
'Window'
\color magenta
	
\color inherit
		 
\end_layout

\begin_layout Plain Layout

\family typewriter
	
\color magenta
-fg => 'green'
\color inherit
	 
\end_layout

\begin_layout Plain Layout

\family typewriter
);
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Text mich voll - Curses::UI::Label
\end_layout

\begin_layout Itemize
Klassische Label wie in der 
\begin_inset Quotes ald
\end_inset

großen
\begin_inset Quotes ard
\end_inset

 GUI-Programmierung
\end_layout

\begin_layout Itemize
Darstellung von Text innerhalb eines Window-Widgets
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
my $label = $win->add(
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color red
'helloLabel',
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
'Label',
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
-text => 'Hallo Welt!',
\end_layout

\begin_layout Plain Layout

\family typewriter
\color magenta
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-x => 1, -y => 1
\end_layout

\begin_layout Plain Layout

\family typewriter
);
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Und nun alles zusammen - Hallo Welt!
\end_layout

\begin_layout Standard
Es könnte einfacher nicht sein:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
#!/usr/bin/perl
\end_layout

\begin_layout Plain Layout

\family typewriter
use strict;
\end_layout

\begin_layout Plain Layout

\family typewriter
use warnings;
\end_layout

\begin_layout Plain Layout

\family typewriter
use Curses::UI;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
my $cui = new Curses::UI;
\end_layout

\begin_layout Plain Layout

\family typewriter
my $win = $cui->add(
\color red
'mainWindow'
\color magenta
, 
\color blue
'Window'
\color green
, 
\color magenta
-fg => 'green'
\color inherit
);
\end_layout

\begin_layout Plain Layout

\family typewriter
my $label = $win->add(
\color red
'helloLabel',
\color magenta
 
\color blue
'Label',
\color green
 
\color magenta
-text => 'Hallo Welt!', -x => 1, -y => 1
\color inherit
);
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
$cui->set_binding(sub { exit 0; }, 
\begin_inset Quotes ald
\end_inset


\backslash
cC
\begin_inset Quotes ard
\end_inset

, 
\begin_inset Quotes ald
\end_inset

q
\begin_inset Quotes ard
\end_inset

);
\end_layout

\begin_layout Plain Layout

\family typewriter
$cui->mainloop();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Was Curses::UI ausmacht - Die Widgets, Teil 2
\end_layout

\begin_layout BeginFrame
Alles geordnet - Curses::UI::ListBox
\end_layout

\begin_layout Itemize
Ordnen von Elementen in einer Liste
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
my $list = $win->add(
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color red
"listBox", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
"Listbox", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
-fg => "white", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\color magenta
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-border => 1
\end_layout

\begin_layout Plain Layout

\family typewriter
); 
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Hinzufügen von Elementen via ->values(
\backslash
@arrayMitContent)
\end_layout

\begin_layout BeginFrame
Textsicher - Curses::UI::TextViewer
\end_layout

\begin_layout Itemize
Darstellung von Freitext in einer Box
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
my $text = $main->add(
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color red
"textBox",
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
"TextViewer",
\color inherit
 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color magenta
-fg => "white",
\end_layout

\begin_layout Plain Layout

\family typewriter
\color magenta
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-border => 1
\end_layout

\begin_layout Plain Layout

\family typewriter
);
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Hinzufügen von Text mit ->text($hinzuzufügenderText)
\end_layout

\begin_layout BeginFrame
Zusammenfassung - Widgets
\end_layout

\begin_layout Itemize
Widgets haben meist den Aufbau ID, Typ, Optionen
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Neben den vorgestellten viele Weitere (Kalender, Filebrowser, Progressbar,
 Radiobuttonbox, TextEditor)
\end_layout

\begin_layout Subsection
Bindings und Dialoge
\end_layout

\begin_layout BeginFrame
Auf Knopfdruck - Bindings
\end_layout

\begin_layout Itemize
Reaktionen auf Tastendruck kann für verschiedene Widgets eingestellt werden
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Auf Knopfdruck wird eine vordefinierte Funktion aufgerufen
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Vorrang hat das Widget, welches den Fokus hat
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
$cui->set_binding(
\color red
sub { exit 0; }
\color inherit
, 
\color magenta

\begin_inset Quotes ald
\end_inset


\backslash
cC
\begin_inset Quotes ard
\end_inset

, 
\begin_inset Quotes ald
\end_inset

q
\begin_inset Quotes ard
\end_inset


\color inherit
);
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
In Szene gesetzt - Dialoge
\end_layout

\begin_layout Itemize
Vielzahl von Out-of-the-Box-Dialogen (Question, Status, Filebrowser, Calendar)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Eigener Dialog mit eigenen Widgets möglich
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Pro Dialog-Typ eigene Methode
\end_layout

\begin_layout BeginFrame
In Szene gesetzt - Dialoge
\end_layout

\begin_layout Itemize
Beispiel:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard

\family typewriter
$question = $cui->question(
\begin_inset Quotes ald
\end_inset

Alles gut hier?
\begin_inset Quotes ard
\end_inset

);
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard

\family typewriter
$status = $cui->status(
\begin_inset Quotes ald
\end_inset

Alles gut hier!
\begin_inset Quotes ard
\end_inset

);
\end_layout

\begin_layout BeginFrame
In Szene gesetzt - Dialoge
\end_layout

\begin_layout Itemize
Komplexere Dialoge sind über die Methode ->dialog() realisierbar:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
my $ja = $cui->dialog(
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-message => "Wirklich alles gut?", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-buttons => [
\begin_inset Quotes ald
\end_inset

Ja
\begin_inset Quotes ard
\end_inset

, 
\begin_inset Quotes ard
\end_inset

Nein
\begin_inset Quotes ard
\end_inset

], 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-values => [1, 0], 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-title => 
\begin_inset Quotes ald
\end_inset

Jetzt will ich's aber wissen
\begin_inset Quotes ard
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
);
\end_layout

\begin_layout Plain Layout

\family typewriter
if ($ja) { # Alles gut, Wahnsinnscode folgt } 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Weiterführendes
\end_layout

\begin_layout Subsection
Ein einfaches Layout
\end_layout

\begin_layout BeginFrame
Nicht direkt möglich...
\end_layout

\begin_layout Itemize
Kein direktes Layouting möglich
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Mit einfachen width/height-Berechnungen vieles machbar
\end_layout

\begin_layout BeginFrame
...aber machbar...
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
\size small
\color red
my $max_height = $main->height(); 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\color red
my $max_width = $main->width();
\color inherit
 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
my $project_list = $main->add("Projects", "Listbox", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-border => 1, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
-x => (
\color red
$max_width
\color blue
 / 2), 
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-height => int (
\color red
$max_height
\color blue
 / 2)); 
\color inherit

\begin_inset Newline newline
\end_inset

my $ticket_list = $main->add("Tickets", "Listbox", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-border => 1, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
-y => 0, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-height => int (
\color red
$max_height
\color blue
 / 2), 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-width => int (
\color red
$max_width
\color blue
 / 2)); 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
my $box = $main->add("Content", "TextViewer", 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-border => 1, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
-y => (
\color red
$max_height
\color blue
 / 2), 
\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\color blue
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-height => (
\color red
$max_height
\color blue
 / 2));
\color inherit
 
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
...und formschön!
\end_layout

\begin_layout Standard
(Terminalfenster öffnet sich nun vollautomatisch durch Handbetätigung)
\end_layout

\begin_layout Subsection
Fallstricke
\end_layout

\begin_layout BeginFrame
Es ist nicht alles Gold was, glänzt
\end_layout

\begin_layout Itemize
Ausrichtung anhand von X- und Y-Koordinaten kann mühsam sein
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Bei gravierenden Fehlern passiert nichts
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Von Curses bekannte Fallstricke (Dimensionen)
\end_layout

\begin_layout Section*
Zusammenfassung
\end_layout

\begin_layout BeginFrame
Zusammenfassung
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Die Zusammenfassung sollte sehr kurz sein.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color none
Curses::UI ist einfach, schnell und unkompliziert
\end_layout

\begin_layout Itemize
Erweiterung von bestehenden Scripten einfach möglich
\end_layout

\begin_layout Itemize

\color none
Dank hervorragender Dokumentation keine offenen Fragen
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Der folgende Ausblick ist optional.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vskip0pt plus.5fill
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Weiterführendes
\end_layout

\begin_deeper
\begin_layout Itemize
Unter https://github.com/deralex/hardticks 
\begin_inset Quotes ald
\end_inset

Mini
\begin_inset Quotes ard
\end_inset

-Bugzilla
\end_layout

\begin_layout Itemize
Unter https://github.com/deralex/klein-schoen-schnell
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\end_body
\end_document
